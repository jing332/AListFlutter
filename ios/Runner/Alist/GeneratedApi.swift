// Autogenerated from Pigeon (v16.0.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

extension FlutterError: Swift.Error {
}

private func wrapResult(_ result: Any?) -> [Any?] {
    return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
    if let flutterError = error as? FlutterError {
        return [
            flutterError.code,
            flutterError.message,
            flutterError.details,
        ]
    }
    return [
        "\(error)",
        "\(type(of: error))",
        "Stacktrace: \(Thread.callStackSymbols)",
    ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
    return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
    return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
    if value is NSNull {
        return nil
    }
    return value as! T?
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol AppConfig {
    func isWakeLockEnabled() throws -> Bool
    func setWakeLockEnabled(enabled: Bool) throws
    func isStartAtBootEnabled() throws -> Bool
    func setStartAtBootEnabled(enabled: Bool) throws
    func isAutoCheckUpdateEnabled() throws -> Bool
    func setAutoCheckUpdateEnabled(enabled: Bool) throws
    func isAutoOpenWebPageEnabled() throws -> Bool
    func setAutoOpenWebPageEnabled(enabled: Bool) throws
    func getDataDir() throws -> String
    func setDataDir(dir: String) throws
    func isSilentJumpAppEnabled() throws -> Bool
    func setSilentJumpAppEnabled(enabled: Bool) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class AppConfigSetup {
    /// The codec used by AppConfig.
    /// Sets up an instance of `AppConfig` to handle messages through the `binaryMessenger`.
    static func setUp(binaryMessenger: FlutterBinaryMessenger, api: AppConfig?) {
        let isWakeLockEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.AppConfig.isWakeLockEnabled", binaryMessenger: binaryMessenger)
        if let api = api {
            isWakeLockEnabledChannel.setMessageHandler { _, reply in
                do {
                    let result = try api.isWakeLockEnabled()
                    reply(wrapResult(result))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            isWakeLockEnabledChannel.setMessageHandler(nil)
        }
        let setWakeLockEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.AppConfig.setWakeLockEnabled", binaryMessenger: binaryMessenger)
        if let api = api {
            setWakeLockEnabledChannel.setMessageHandler { message, reply in
                let args = message as! [Any?]
                let enabledArg = args[0] as! Bool
                do {
                    try api.setWakeLockEnabled(enabled: enabledArg)
                    reply(wrapResult(nil))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            setWakeLockEnabledChannel.setMessageHandler(nil)
        }
        let isStartAtBootEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.AppConfig.isStartAtBootEnabled", binaryMessenger: binaryMessenger)
        if let api = api {
            isStartAtBootEnabledChannel.setMessageHandler { _, reply in
                do {
                    let result = try api.isStartAtBootEnabled()
                    reply(wrapResult(result))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            isStartAtBootEnabledChannel.setMessageHandler(nil)
        }
        let setStartAtBootEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.AppConfig.setStartAtBootEnabled", binaryMessenger: binaryMessenger)
        if let api = api {
            setStartAtBootEnabledChannel.setMessageHandler { message, reply in
                let args = message as! [Any?]
                let enabledArg = args[0] as! Bool
                do {
                    try api.setStartAtBootEnabled(enabled: enabledArg)
                    reply(wrapResult(nil))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            setStartAtBootEnabledChannel.setMessageHandler(nil)
        }
        let isAutoCheckUpdateEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.AppConfig.isAutoCheckUpdateEnabled", binaryMessenger: binaryMessenger)
        if let api = api {
            isAutoCheckUpdateEnabledChannel.setMessageHandler { _, reply in
                do {
                    let result = try api.isAutoCheckUpdateEnabled()
                    reply(wrapResult(result))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            isAutoCheckUpdateEnabledChannel.setMessageHandler(nil)
        }
        let setAutoCheckUpdateEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.AppConfig.setAutoCheckUpdateEnabled", binaryMessenger: binaryMessenger)
        if let api = api {
            setAutoCheckUpdateEnabledChannel.setMessageHandler { message, reply in
                let args = message as! [Any?]
                let enabledArg = args[0] as! Bool
                do {
                    try api.setAutoCheckUpdateEnabled(enabled: enabledArg)
                    reply(wrapResult(nil))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            setAutoCheckUpdateEnabledChannel.setMessageHandler(nil)
        }
        let isAutoOpenWebPageEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.AppConfig.isAutoOpenWebPageEnabled", binaryMessenger: binaryMessenger)
        if let api = api {
            isAutoOpenWebPageEnabledChannel.setMessageHandler { _, reply in
                do {
                    let result = try api.isAutoOpenWebPageEnabled()
                    reply(wrapResult(result))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            isAutoOpenWebPageEnabledChannel.setMessageHandler(nil)
        }
        let setAutoOpenWebPageEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.AppConfig.setAutoOpenWebPageEnabled", binaryMessenger: binaryMessenger)
        if let api = api {
            setAutoOpenWebPageEnabledChannel.setMessageHandler { message, reply in
                let args = message as! [Any?]
                let enabledArg = args[0] as! Bool
                do {
                    try api.setAutoOpenWebPageEnabled(enabled: enabledArg)
                    reply(wrapResult(nil))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            setAutoOpenWebPageEnabledChannel.setMessageHandler(nil)
        }
        let getDataDirChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.AppConfig.getDataDir", binaryMessenger: binaryMessenger)
        if let api = api {
            getDataDirChannel.setMessageHandler { _, reply in
                do {
                    let result = try api.getDataDir()
                    reply(wrapResult(result))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            getDataDirChannel.setMessageHandler(nil)
        }
        let setDataDirChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.AppConfig.setDataDir", binaryMessenger: binaryMessenger)
        if let api = api {
            setDataDirChannel.setMessageHandler { message, reply in
                let args = message as! [Any?]
                let dirArg = args[0] as! String
                do {
                    try api.setDataDir(dir: dirArg)
                    reply(wrapResult(nil))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            setDataDirChannel.setMessageHandler(nil)
        }
        let isSilentJumpAppEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.AppConfig.isSilentJumpAppEnabled", binaryMessenger: binaryMessenger)
        if let api = api {
            isSilentJumpAppEnabledChannel.setMessageHandler { _, reply in
                do {
                    let result = try api.isSilentJumpAppEnabled()
                    reply(wrapResult(result))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            isSilentJumpAppEnabledChannel.setMessageHandler(nil)
        }
        let setSilentJumpAppEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.AppConfig.setSilentJumpAppEnabled", binaryMessenger: binaryMessenger)
        if let api = api {
            setSilentJumpAppEnabledChannel.setMessageHandler { message, reply in
                let args = message as! [Any?]
                let enabledArg = args[0] as! Bool
                do {
                    try api.setSilentJumpAppEnabled(enabled: enabledArg)
                    reply(wrapResult(nil))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            setSilentJumpAppEnabledChannel.setMessageHandler(nil)
        }
    }
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol NativeCommon {
    func startActivityFromUri(intentUri: String) throws -> Bool
    func getDeviceSdkInt() throws -> Int64
    func getDeviceCPUABI() throws -> String
    func getVersionName() throws -> String
    func getVersionCode() throws -> Int64
    func toast(msg: String) throws
    func longToast(msg: String) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class NativeCommonSetup {
    /// The codec used by NativeCommon.
    /// Sets up an instance of `NativeCommon` to handle messages through the `binaryMessenger`.
    static func setUp(binaryMessenger: FlutterBinaryMessenger, api: NativeCommon?) {
        let startActivityFromUriChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.NativeCommon.startActivityFromUri", binaryMessenger: binaryMessenger)
        if let api = api {
            startActivityFromUriChannel.setMessageHandler { message, reply in
                let args = message as! [Any?]
                let intentUriArg = args[0] as! String
                do {
                    let result = try api.startActivityFromUri(intentUri: intentUriArg)
                    reply(wrapResult(result))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            startActivityFromUriChannel.setMessageHandler(nil)
        }
        let getDeviceSdkIntChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.NativeCommon.getDeviceSdkInt", binaryMessenger: binaryMessenger)
        if let api = api {
            getDeviceSdkIntChannel.setMessageHandler { _, reply in
                do {
                    let result = try api.getDeviceSdkInt()
                    reply(wrapResult(result))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            getDeviceSdkIntChannel.setMessageHandler(nil)
        }
        let getDeviceCPUABIChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.NativeCommon.getDeviceCPUABI", binaryMessenger: binaryMessenger)
        if let api = api {
            getDeviceCPUABIChannel.setMessageHandler { _, reply in
                do {
                    let result = try api.getDeviceCPUABI()
                    reply(wrapResult(result))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            getDeviceCPUABIChannel.setMessageHandler(nil)
        }
        let getVersionNameChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.NativeCommon.getVersionName", binaryMessenger: binaryMessenger)
        if let api = api {
            getVersionNameChannel.setMessageHandler { _, reply in
                do {
                    let result = try api.getVersionName()
                    reply(wrapResult(result))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            getVersionNameChannel.setMessageHandler(nil)
        }
        let getVersionCodeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.NativeCommon.getVersionCode", binaryMessenger: binaryMessenger)
        if let api = api {
            getVersionCodeChannel.setMessageHandler { _, reply in
                do {
                    let result = try api.getVersionCode()
                    reply(wrapResult(result))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            getVersionCodeChannel.setMessageHandler(nil)
        }
        let toastChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.NativeCommon.toast", binaryMessenger: binaryMessenger)
        if let api = api {
            toastChannel.setMessageHandler { message, reply in
                let args = message as! [Any?]
                let msgArg = args[0] as! String
                do {
                    try api.toast(msg: msgArg)
                    reply(wrapResult(nil))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            toastChannel.setMessageHandler(nil)
        }
        let longToastChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.NativeCommon.longToast", binaryMessenger: binaryMessenger)
        if let api = api {
            longToastChannel.setMessageHandler { message, reply in
                let args = message as! [Any?]
                let msgArg = args[0] as! String
                do {
                    try api.longToast(msg: msgArg)
                    reply(wrapResult(nil))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            longToastChannel.setMessageHandler(nil)
        }
    }
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol Android {
    func addShortcut() throws
    func startService() throws
    func setAdminPwd(pwd: String) throws
    func getAListHttpPort() throws -> Int64
    func isRunning() throws -> Bool
    func getAListVersion() throws -> String
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class AndroidSetup {
    /// The codec used by Android.
    /// Sets up an instance of `Android` to handle messages through the `binaryMessenger`.
    static func setUp(binaryMessenger: FlutterBinaryMessenger, api: Android?) {
        let addShortcutChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.Android.addShortcut", binaryMessenger: binaryMessenger)
        if let api = api {
            addShortcutChannel.setMessageHandler { _, reply in
                do {
                    try api.addShortcut()
                    reply(wrapResult(nil))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            addShortcutChannel.setMessageHandler(nil)
        }
        let startServiceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.Android.startService", binaryMessenger: binaryMessenger)
        if let api = api {
            startServiceChannel.setMessageHandler { _, reply in
                do {
                    try api.startService()
                    reply(wrapResult(nil))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            startServiceChannel.setMessageHandler(nil)
        }
        let setAdminPwdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.Android.setAdminPwd", binaryMessenger: binaryMessenger)
        if let api = api {
            setAdminPwdChannel.setMessageHandler { message, reply in
                let args = message as! [Any?]
                let pwdArg = args[0] as! String
                do {
                    try api.setAdminPwd(pwd: pwdArg)
                    reply(wrapResult(nil))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            setAdminPwdChannel.setMessageHandler(nil)
        }
        let getAListHttpPortChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.Android.getAListHttpPort", binaryMessenger: binaryMessenger)
        if let api = api {
            getAListHttpPortChannel.setMessageHandler { _, reply in
                do {
                    let result = try api.getAListHttpPort()
                    reply(wrapResult(result))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            getAListHttpPortChannel.setMessageHandler(nil)
        }
        let isRunningChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.Android.isRunning", binaryMessenger: binaryMessenger)
        if let api = api {
            isRunningChannel.setMessageHandler { _, reply in
                do {
                    let result = try api.isRunning()
                    reply(wrapResult(result))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            isRunningChannel.setMessageHandler(nil)
        }
        let getAListVersionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.alist_flutter.Android.getAListVersion", binaryMessenger: binaryMessenger)
        if let api = api {
            getAListVersionChannel.setMessageHandler { _, reply in
                do {
                    let result = try api.getAListVersion()
                    reply(wrapResult(result))
                } catch {
                    reply(wrapError(error))
                }
            }
        } else {
            getAListVersionChannel.setMessageHandler(nil)
        }
    }
}

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol EventProtocol {
    func onServiceStatusChanged(isRunning isRunningArg: Bool, completion: @escaping (Result<Void, FlutterError>) -> Void)
    func onServerLog(level levelArg: Int64, time timeArg: String, log logArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void)
}

class Event: EventProtocol {
    private let binaryMessenger: FlutterBinaryMessenger

    init(binaryMessenger: FlutterBinaryMessenger) {
        self.binaryMessenger = binaryMessenger
    }

    func onServiceStatusChanged(isRunning isRunningArg: Bool, completion: @escaping (Result<Void, FlutterError>) -> Void) {
        let channelName: String = "dev.flutter.pigeon.alist_flutter.Event.onServiceStatusChanged"
        let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
        channel.sendMessage([isRunningArg] as [Any?]) { response in
            guard let listResponse = response as? [Any?] else {
                completion(.failure(createConnectionError(withChannelName: channelName)))
                return
            }
            if listResponse.count > 1 {
                let code: String = listResponse[0] as! String
                let message: String? = nilOrValue(listResponse[1])
                let details: String? = nilOrValue(listResponse[2])
                completion(.failure(FlutterError(code: code, message: message, details: details)))
            } else {
                completion(.success(Void()))
            }
        }
    }

    func onServerLog(level levelArg: Int64, time timeArg: String, log logArg: String, completion: @escaping (Result<Void, FlutterError>) -> Void) {
        let channelName: String = "dev.flutter.pigeon.alist_flutter.Event.onServerLog"
        let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
        channel.sendMessage([levelArg, timeArg, logArg] as [Any?]) { response in
            guard let listResponse = response as? [Any?] else {
                completion(.failure(createConnectionError(withChannelName: channelName)))
                return
            }
            if listResponse.count > 1 {
                let code: String = listResponse[0] as! String
                let message: String? = nilOrValue(listResponse[1])
                let details: String? = nilOrValue(listResponse[2])
                completion(.failure(FlutterError(code: code, message: message, details: details)))
            } else {
                completion(.success(Void()))
            }
        }
    }
}
